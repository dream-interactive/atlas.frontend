import { Component, OnInit } from '@angular/core';
import {FormControl, FormGroup, Validators} from '@angular/forms';
import {Organization, OrganizationService} from '../../services/organization.service';
import {ProjectType} from '../../services/project.service';

@Component({
  selector: 'app-project-modal',
  templateUrl: './project-modal.component.html',
  styleUrls: ['./project-modal.component.scss']
})
export class ProjectModalComponent implements OnInit {
  removeOrg: Organization = {
    id: '1', image: '../../../assets/images/icon-business-pack/svg/101-laptop.svg', name: 'Remove'
  };
  organizations: Organization[] = [this.removeOrg];

  projectForm: FormGroup;
  projectNameControl = new FormControl('', [Validators.required, Validators.pattern('^[a-zA-Z](?:-?[a-zA-Z0-9]+)*')]);
  projectKeyControl = new FormControl(
    '',
    [Validators.required,
      Validators.pattern('^[A-Z]*'),
      Validators.minLength(3),
      Validators.maxLength(5)]
  );
  organizationControl = new FormControl(`${this.organizations[0].id}`, Validators.required);
  selectedOrganization: any;


  projectType: ProjectType;


  constructor(private orgService: OrganizationService) {
    this.projectForm = new FormGroup({
      projectName: this.projectNameControl,
      projectKey: this.projectKeyControl,
      organizationControl: this.organizationControl
    });
  }

  ngOnInit(): void {

  }

  create(): void{
    console.log(this.projectType);
  }

  getProjectNameErrorMessage(): string {

    if (this.projectNameControl.hasError('required')) {
      return 'You must enter a value';
    }
    return (this.projectNameControl.hasError('pattern'))
      ? 'Project name should start with latin alphabet letters(case insensitive), can contain numbers and dash(inside)'
      : '';
  }
  getProjectKeyErrorMessage(): string {
    if (this.projectKeyControl.hasError('required')) {
      return 'You must enter a value';
    }
    else if (this.projectKeyControl.hasError('minLength')) {
      return 'Min length 3 characters';
    }
    else if (this.projectKeyControl.hasError('maxLength')) {
      return 'Max length 5 characters';

    }
    return (this.projectKeyControl.hasError('pattern'))
      ? 'Key name should contain only latin alphabet letters in upper case.'
      : '';
  }
  keyToUpperCase(): void {
    this.projectKeyControl.setValue(this.projectKeyControl.value.toUpperCase());
  }

  setAutoGeneratedKeyValue(): void {

    const pName = this.projectNameControl.value.toString();
    const chars = pName.replace(/[^a-zA-Z]+/g, '');
    if (chars.length > 2) {
      this.projectKeyControl.setValue(chars.toUpperCase().substring(0, 5));
    }
  }

 /* getRandomImageForProject(): string {

    const imgURLs = [
      '../../assets/images/icon-business-pack/svg/101-calendar.svg',
      '../../assets/images/icon-business-pack/svg/101-card.svg',
      '../../assets/images/icon-business-pack/svg/101-envelope.svg',
      '../../assets/images/icon-business-pack/svg/101-flask.svg',
      '../../assets/images/icon-business-pack/svg/101-gear.svg'
    ];

    const randomId = Math.floor(Math.random() * Math.floor(imgURLs.length));

    return imgURLs[randomId];
  }*/
}
